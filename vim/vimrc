" reset vim  to vim-defaults
if &compatible          " only if not set before:
  set nocompatible      " use vim-defaults instead of vi-defaults (easier, more user friendly)
endif

" filetype off                   " required! -> but bug with git

set rtp+=~/.vim/bundle/vundle/
call vundle#begin()

" Vundle manage
Plugin 'gmarik/vundle'

" Main (mandatory) bundles
" ------------------------
Plugin 'tpope/vim-sensible'       " Init vimrc by tpope
Plugin 'bling/vim-airline'        " Powerline with colors
Plugin 'kien/ctrlp.vim'           " Ctrlp
Plugin 'tpope/vim-vinegar'        " Ctrlp
Plugin 'scrooloose/nerdcommenter' " the missing comment tool
Plugin 'scrooloose/syntastic'     " Multi language checker
Plugin 'tpope/vim-surround'       " Surrounder
Plugin 'vim-scripts/scratch.vim'  " Block note into buffer
Plugin 'Shougo/neocomplcache.vim' " Autocompletion
Plugin 'sdanielf/vim-stdtabs'     " Standard indentation matching language
Plugin 'tpope/vim-fugitive'       " Git for git blame..
Plugin 'bufkill.vim'              " Kill buffer :bd

" UI
" --
Plugin 'w0ng/vim-hybrid'

" Nice to have but not required for you Jedi
" ------------------------------------------
Plugin 'majutsushi/tagbar'               " IDE like navigator into methods
Plugin 'nathanaelkane/vim-indent-guides' " Indentation guide <leader>ig
Plugin 'mattn/emmet-vim'                 " html tags
Plugin 'tpope/vim-markdown'

" Specific to projects
" --------------------
Plugin 'nono/vim-handlebars'
Plugin 'elzr/vim-json'
Plugin 'heavenshell/vim-jsdoc'
Plugin 'pangloss/vim-javascript'
Plugin 'kchmck/vim-coffee-script'
Plugin 'jnwhiteh/vim-golang'

" Git
" ---
Plugin 'airblade/vim-gitgutter'
Plugin 'solars/github-vim'

call vundle#end()            " required

filetype plugin on
filetype indent on
syntax on

" color settings (if terminal/gui supports it)
if $TERM =~ '256color'
  set t_Co=256
  " Disable Background Color Erase (BCE) so that color schemes
  " work properly when Vim is used inside tmux and GNU screen.
  " See also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
elseif $TERM =~ '^xterm$'
  set t_Co=256
endif

if &t_Co > 2 || has("gui_running")
  syntax on          " enable colors
  set hlsearch       " highlight search (very useful!)
  set incsearch      " search incremently (search while typing)
endif

" display settings
set background=dark     " enable for dark terminals
set scrolloff=2         " 2 lines above/below cursor when scrolling
set number              " show line numbers
set showmatch           " show matching bracket (briefly jump)
set showmode            " show mode in status bar (insert/replace/...)
set showcmd             " show typed command in status bar
set ruler               " show cursor position in status bar
set title               " show file in titlebar
set wildmenu            " completion with menu
set wildmode=longest:full,full
set wildignore=*.o,*.obj,*.bak,*.exe,*.py[co],*.swp,*~,*.pyc,.svn,.git
set laststatus=2        " use 2 lines for the status bar
set matchtime=2         " show matching bracket for 0.2 seconds
set matchpairs+=<:>     " specially for html

" editor settings
set colorcolumn=80             " Colum lenght
set autoindent smartindent     " turn on auto/smart indenting
set smarttab                   " smart tab handling for indenting
set magic                      " change the way backslashes are used in search patterns
set backspace=indent,eol,start " Allow backspacing over everything in insert mode
set tabstop=2                  " number of spaces a tab counts for
set shiftwidth=2               " spaces for autoindents
set expandtab                  " turn a tabs into spaces
set undolevels=10000           " number of forgivable mistakes
set timeoutlen=3000
set fileformat=unix            " file mode is unix
set diffopt=filler,iwhite      " ignore all whitespace and sync

set encoding=utf-8
set fileencoding=utf-8

" Trim trailing whitespace when saving a document
autocmd BufWritePre * :%s/\s\+$//e

"Better line wrapping
set wrap
set textwidth=80
set formatoptions=qrn1

" Search options
set ignorecase
set hlsearch
set incsearch
set showmatch
set smartcase " but become case sensitive if you type uppercase characters

" system settings
set lazyredraw          " no redraws in macros
set confirm             " get a dialog when :q, :w, or :wq fails
set hidden              " remember undo after quitting
set history=50          " keep 50 lines of command history
set mouse=a             " use mouse in all modes
set mousehide           " Hide mouse when typing
set splitright          " the new window is created on the right

" Backups
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
set undodir=~/.vim/tmp/undo//     " undo files
set backup                        " enable backup

" auto file reloading
set autoread

" Remove bell beeping
set vb
set noeb vb t_vb=

" Color Scheme
set cursorline          " Higlight the current line
colorscheme hybrid

if executable('ag')
  set grepprg=ag\ --search-files\ --smart-case\ --nogroup\ --nocolor
  command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|botright cw|redraw!
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l -f --nocolor -g ""'
endif

" ==== Mappings ====================
" To see all leader mappings currently in use:
" grep -R leader .vimrc .vim/bundle | perl -pe 's/.+(<leader>\w+).+/\1/' | sort | uniq
" ==================================
" Disable useless and annoying keys
noremap Q <Nop>

nnoremap <Leader>p :CtrlPMRUFiles<CR>
nnoremap <Leader>T :CtrlPClearCache<CR>:CtrlP<CR>
" grep word under cursor
nnoremap <Leader>F :Ag <C-R><C-W><CR>
nnoremap <Leader>f :Ag<space>

nmap <Leader>ss :%s///g<left><left>
vmap <Leader>ss :s///g<left><left>

"Shortcut for editing  vimrc file in a new tab
nmap <leader>ec :tabedit $MYVIMRC<cr>

imap <Leader>ip opp "p$a: #{p$a.inspect}"
nmap <leader>ip yiwi<Leader>ip
vmap <leader>ip yi<Leader>ip

imap <Leader>cp oconsole.log("p$a", p$a)
nmap <leader>cp yiwi<Leader>cp
vmap <leader>cp yi<Leader>cp

nmap <leader>% i<%= %>F=a

vmap <S-Up> <Up>
vmap <S-Down> <Down>
"----------------------
" Plugins configuration
"----------------------

" Airline
let g:airline_theme = 'dark'
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline#extensions#syntastic#enabled = 0

" Neocomplete
let g:neocomplcache_enable_at_startup = 1
inoremap <expr><Tab> pumvisible() ? "\<C-n>" : "\<Tab>"

" JavaScript
autocmd Filetype javascript iabbr cl- console.log('');<ESC>F'i

" handlebars templates
autocmd BufNewFile,BufRead *.hb set ft=handlebars

" Nerdcommenter
let NERDSpaceDelims = 1

" GitGutter
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk]

" Syntastic
let g:syntastic_ruby_checkers = ['rubocop']
let g:syntastic_ruby_rubocop_exec = '~/.rubocop-wl.sh'
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
cabbrev l SyntasticCheck
cabbrev wl w <BAR> SyntasticCheck

" Source the vimrc file after saving it. This way, you don't have to reload Vim to see the changes.
if has("autocmd")
 augroup myvimrchooks
  au!
  autocmd bufwritepost .vimrc source ~/.vimrc
 augroup END
endif

set clipboard=unnamed

