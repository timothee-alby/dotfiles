" reset vim  to vim-defaults
if &compatible          " only if not set before:
  set nocompatible      " use vim-defaults instead of vi-defaults (easier, more user friendly)
endif

call plug#begin('~/.vim/plugged')

" Main (mandatory) bundles
" ------------------------
Plug 'tpope/vim-sensible'       " Init vimrc by tpope
Plug 'bling/vim-airline'        " Powerline with colors
Plug 'kien/ctrlp.vim'           " Ctrlp
Plug 'tpope/vim-vinegar'        " Ctrlp
Plug 'scrooloose/nerdcommenter' " the missing comment tool
Plug 'w0rp/ale'                 " Asynchronous Lint Engine
Plug 'tpope/vim-surround'       " Surrounder
Plug 'vim-scripts/scratch.vim'  " Block note into buffer
Plug 'Shougo/neocomplcache.vim' " Autocompletion
Plug 'tpope/vim-fugitive'       " Git for git blame..
Plug 'tpope/vim-rhubarb'        " Github integration
Plug 'skwp/greplace.vim'        " Replace into multifiles

" UI
" --
Plug 'w0ng/vim-hybrid'
Plug 'chriskempson/base16-vim'

" Tags management
" ------------------------------------------
Plug 'majutsushi/tagbar'               " IDE like navigator into methods

" Nice to have but not required for you Jedi
" ------------------------------------------
Plug 'nathanaelkane/vim-indent-guides' " Indentation guide <leader>ig
Plug 'mattn/emmet-vim'                 " html tags
Plug 'tpope/vim-markdown'
Plug 'dbeniamine/cheat.sh-vim'
Plug 'jeffkreeftmeijer/vim-numbertoggle'

" Specific to projects
" --------------------
Plug 'nono/vim-handlebars'
Plug 'elzr/vim-json'
Plug 'heavenshell/vim-jsdoc'
Plug 'pangloss/vim-javascript'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'kchmck/vim-coffee-script'
Plug 'jnwhiteh/vim-golang'
Plug 'digitaltoad/vim-pug'
Plug 'Glench/Vim-Jinja2-Syntax'

" Git
" ---
Plug 'airblade/vim-gitgutter'

" Ruby
" ---
Plug 'jgdavey/vim-blockle'

Plug 'vim-scripts/dbext.vim'

" Add plugins to &runtimepath
call plug#end()

filetype plugin on
filetype indent on
syntax on

" display settings
set background=dark     " enable for dark terminals
set scrolloff=2         " 2 lines above/below cursor when scrolling
set number              " show line numbers
set showmatch           " show matching bracket (briefly jump)
set showmode            " show mode in status bar (insert/replace/...)
set showcmd             " show typed command in status bar
set ruler               " show cursor position in status bar
set title               " show file in titlebar
set wildmenu            " completion with menu
set wildmode=longest:full,full
set wildignore=*.o,*.obj,*.bak,*.exe,*.py[co],*.swp,*~,*.pyc,.svn,.git
set laststatus=2        " use 2 lines for the status bar
set matchtime=2         " show matching bracket for 0.2 seconds
set matchpairs+=<:>     " specially for html

" editor settings
set colorcolumn=80             " Colum lenght
set autoindent smartindent     " turn on auto/smart indenting
set smarttab                   " smart tab handling for indenting
set magic                      " change the way backslashes are used in search patterns
set backspace=indent,eol,start " Allow backspacing over everything in insert mode
set tabstop=2                  " number of spaces a tab counts for
set shiftwidth=2               " spaces for autoindents
set expandtab                  " turn a tabs into spaces
set undolevels=10000           " number of forgivable mistakes
set timeoutlen=3000
set fileformat=unix            " file mode is unix
set diffopt=filler,iwhite      " ignore all whitespace and sync
set list                       " display whitespaces
set listchars=tab:>-,space:Â·   " display spaces and tabs

set encoding=utf-8
set fileencoding=utf-8

" Trim trailing whitespace when saving a document
fun! TrimWhitespace()
  if &ft =~ 'pug'
    " Don't strip pug files
    return
  endif
  let l:save = winsaveview()
  %s/\s\+$//e
  call winrestview(l:save)
endfun
autocmd BufWritePre * :call TrimWhitespace()
command! TrimWhitespace call TrimWhitespace()

"Better line wrapping
set wrap
set textwidth=80
set formatoptions=qrn1

" Search options
set ignorecase
set hlsearch
set incsearch
set showmatch
set smartcase " but become case sensitive if you type uppercase characters

" system settings
set lazyredraw          " no redraws in macros
set confirm             " get a dialog when :q, :w, or :wq fails
set hidden              " remember undo after quitting
set history=50          " keep 50 lines of command history
set mouse=a             " use mouse in all modes
set mousehide           " Hide mouse when typing
set splitright          " the new window is created on the right
set exrc                " read .vimrc file from current directory

" Backups
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
set undodir=~/.vim/tmp/undo//     " undo files
set backup                        " enable backup

" auto file reloading
set autoread

" Remove bell beeping
set vb
set noeb vb t_vb=

" Color Scheme
if !empty($BASE16_THEME)
  let base16colorspace=256
  colorscheme base16-materia
else
  colorscheme hybrid
  " color settings (if terminal/gui supports it)
  if $TERM =~ '256color'
    set t_Co=256
    " Disable Background Color Erase (BCE) so that color schemes
    " work properly when Vim is used inside tmux and GNU screen.
    " See also http://snk.tuxfamily.org/log/vim-256color-bce.html
    set t_ut=
  endif
endif
if &t_Co > 2 || has("gui_running")
  syntax on          " enable colors
  set hlsearch       " highlight search (very useful!)
  set incsearch      " search incremently (search while typing)
endif
set cursorline          " Higlight the current line
highlight SpecialKey ctermfg=0

if executable('ag')
  set grepprg=ag\ --search-files\ --smart-case\ --nogroup\ --nocolor
  command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|botright cw|redraw!
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l -f --nocolor -g ""'
  let g:grep_cmd_opts = '--line-numbers --noheading'
endif

" Tagbar
let g:tagbar_autoclose = 1
let g:tagbar_autofocus = 1
let g:tagbar_sort = 1
let g:tagbar_compact = 1
let g:tagbar_left = 1

" ==== Mappings ====================
" To see all leader mappings currently in use:
" grep -R leader .vimrc .vim/bundle | perl -pe 's/.+(<leader>\w+).+/\1/' | sort | uniq
" ==================================
" Disable useless and annoying keys
noremap Q <Nop>

nnoremap <Leader>p :CtrlPMRUFiles<CR>
nnoremap <Leader>P :CtrlPClearCache<CR>:CtrlP<CR>
" grep word under cursor
nnoremap <Leader>F :Ag <C-R><C-W><CR>
nnoremap <Leader>f :Ag<space>

" work with tags
nnoremap <Leader>t :TagbarToggle<CR>

nmap <Leader>ss :%s///g<left><left>
vmap <Leader>ss :s///g<left><left>

" Capitalize Selection
" see https://taptoe.wordpress.com/2013/02/06/vim-capitalize-every-first-character-of-every-word-in-a-sentence/
vmap <Leader>cap :s/^\a\\|\<\(in\>\\|the\>\\|at\>\\|with\>\\|a\>\\|and\>\\|for\>\\|of\>\\|on\>\\|from\>\\|by\>\)\@\!\a/\u&/g<CR><CR>:noh<CR><CR>
nmap <Leader>cap <S-V><Leader>cap

"Shortcut for editing  vimrc file in a new tab
nmap <leader>ec :tabedit $MYVIMRC<cr>

imap <Leader>ip opp "p$a: #{p$a.inspect}"
nmap <leader>ip yiwi<Leader>ip
vmap <leader>ip yi<Leader>ip

imap <Leader>cp oconsole.log('p$a', p$a)
nmap <leader>cp yiwi<Leader>cp
vmap <leader>cp yi<Leader>cp

nmap <leader>% i<%= %>F=a

vmap <S-Up> <Up>
vmap <S-Down> <Down>
"----------------------
" Plugins configuration
"----------------------

" Airline
let g:airline_theme = 'dark'
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#branch#enabled = 0

" Neocomplete
let g:neocomplcache_enable_at_startup = 1
inoremap <expr><Tab> pumvisible() ? "\<C-n>" : "\<Tab>"

" Nerdcommenter
let NERDSpaceDelims = 1

" GitGutter
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk]

" ALE
let g:ale_linters = {
\ 'javascript': ['eslint'],
\ 'ruby': ['rubocop']
\}
let g:ale_fixers = {'javascript': ['prettier']}
let g:ale_fix_on_save = 1

" Source the vimrc file after saving it. This way, you don't have to reload Vim to see the changes.
if has("autocmd")
 augroup myvimrchooks
  au!
  autocmd bufwritepost .vimrc source ~/.vimrc
 augroup END
endif

set clipboard=unnamed

" Turn off linewise keys.
nmap j gj
nmap k gk
